version: 2.1

orbs:
  win: circleci/windows@2.2.0 # The Windows orb give you everything you need to start using the Windows executor.

jobs:
  #####
  #win
  #######
  buildWin: # name of your job
    executor: 
      name: win/default # executor type# Windows machine image
      shell: bash.exe #
    steps:
        - run: |
            git clone --recurse-submodules -j8 https://github.com/OrganicOrchestra/LGML.git .
            set PLATFORM="Visual Studio 14 2015 Win64"
            set COMPILER=x64
            set LGML_FOLDER=%cd%
            cd ..
            set ROOT_FOLDER=%cd%
            set ASIOSDK=%ROOT_FOLDER%\ASIOSDK2.3
            echo %LGML_FOLDER%\third_party\
            cd "%LGML_FOLDER%\third_party\"
            echo "start build of PTW32"
            
            mkdir PthreadWin32
            git clone -q https://github.com/GerHobbelt/pthread-win32.git PthreadWin32
            cd PthreadWin32
            echo "bit of magic from camomille (pierreguillot)"
            
            sed -i 's/4820;4668;4255;/4820;4668;4255;4711;4100;4312;4127;4296;4456;4619;4310;4311;/' pthread_lib.2015.vcxproj
            sed -i 's/MultiThreadedDLL/MultiThreaded/' pthread_lib.2015.vcxproj
            sed -i 's/MultiThreadedDebugDLL/MultiThreadedDebug/' pthread_lib.2015.vcxproj
            echo "truly building PTW32"
            
            MSBuild.exe pthread.2015.sln /t:pthread_lib /nologo /verbosity:quiet /p:Configuration=Release /p:Platform=%PLATFORM% /p:OutDir=lib/
            
            echo "Copy pthread-win32 headers and library in pure-data directory"
            
            set LIBPDROOT="%LGML_FOLDER%\third_party\libpd"
            copy pthread.h %LIBPDROOT%\pure-data\src\pthread.h
            copy sched.h %LIBPDROOT%\pure-data\src\sched.h
            copy semaphore.h %LIBPDROOT%\pure-data\src\semaphore.h
            set PD_BUILD_DIR="%LGML_FOLDER%\third_party\libpdBuild"
            copy lib\pthread_lib.lib %PD_BUILD_DIR%\VisualStudio2015\pthread.lib
            copy lib\pthread_lib.lib %PD_BUILD_DIR%\pthread.lib
            
            echo "Compile libpd"
            
            cd "%PD_BUILD_DIR%\VisualStudio2015"
            cmake -G "%COMPILER%" -DPD_MULTI=ON -DPD_EXTRA=ON ..
            MSBuild.exe libpd.sln /t:libpdstatic /nologo /verbosity:quiet /p:Configuration=Release /p:Platform=%PLATFORM%
            
            
            cd "%LGML_FOLDER%\third_party\rubberband"
            echo 'building rubberband'
            MSBuild.exe %LGML_FOLDER%\third_party\rubberband\rubberband-library.sln /p:Configuration=Release /m:4
            echo 'dowloading JUCE'
            cd "%LGML_FOLDER%"
            curl https://codeload.github.com/WeAreROLI/JUCE/zip/master -o JUCE.zip
            7z x JUCE.zip -o %ROOT_FOLDER% -y
            ren JUCE-master JUCE
            dir
            dir JUCE
            echo 'downloading ASIOSDK'
            curl https://www.steinberg.net/sdk_downloads/asiosdk2.3.zip -o ASIO_SDK.zip
            7z x ASIO_SDK.zip -o %ROOT_FOLDER% -y
            
            pip install future requests
            python "%LGML_FOLDER%\Scripts\buildScript.py" --configure --os=windows --configuration=%CONFIGURATION% --arch=%PLATFORM%  --exportpath=%LGML_FOLDER%
            
            echo "building lgml"
            MSBuild.exe "%LGML_FOLDER%\Builds\VisualStudio2015\LGML.sln" /p:Configuration=%CONFIGURATION% /p:Platform=%PLATFORM%
            
            echo "packing lgml"
            python "%LGML_FOLDER%\Scripts\buildScript.py" --package --export



#######
# ubuntu18
#########
  buildu18:
    working_directory: ~/LGML
    docker:
      - image: ubuntu:18.04
        environment:
          ARCH_FLAGS: -m64 # arch for linux makefile
          DST_LGML_PATH: /tmp/build
    steps:
      - run:
          name: install git
          command: |
            apt-get -qq update
            apt-get install -y git
      - checkout
      - run:
          name: install LGML dependencies
          command: |
            git submodule update --init --recursive
            sh Scripts/linux/installDeps.sh && sh Scripts/linux/installDevDeps.sh

      - run:
          name: build and package LGML
          command: |
            pip3 install -U pip
            sh Scripts/linux/installExportDeps.sh
            python3 Scripts/buildScript.py --packagesuffix=ubuntu18 --configure --exportpath="$DST_LGML_PATH" --os=linux --configuration=Release --build --package --export
            ldd /root/LGML/Builds/LinuxMakefile/build/LGML > "$DST_LGML_PATH/dependencies.txt"
      - store_artifacts:
          path: /tmp/build/


  build32:
    working_directory: ~/LGML
    docker:
      - image: ubuntu:18.04
        environment:
          PKG_CONFIG_PATH: /usr/lib/i386-linux-gnu/pkgconfig/
          CROSS_ARCH: i386
          ARCH_FLAGS: -m32 # arch for JUCEs linux makefile
          DST_LGML_PATH: /tmp/build32

    steps:
      - run:
          name: install git
          command: |
            apt-get -qq update
            apt-get install -y git
      - checkout
      - run:
          name: install LGML32 dependencies
          command: |
            git submodule update --init --recursive
            apt-get install -y pkg-config gcc-multilib g++-multilib
            sh Scripts/linux/installDevDeps.sh && sh Scripts/linux/installDeps.sh

      - run:
          name: build and package LGML32
          command: |
            pip3 install -U pip
            sh Scripts/linux/installExportDeps.sh
            python3 Scripts/buildScript.py --configure --packagesuffix=ubuntu18 --exportpath="$DST_LGML_PATH" --os=linux --configuration=Release --build --package --export
            ldd /root/LGML/Builds/LinuxMakefile/build/LGML > "$DST_LGML_PATH/dependencies.txt"
      - store_artifacts:
          path: /tmp/build32 #$DST_LGML_PATH

###############
# build Rasp 3/4
##############

  build_rasp:
    working_directory: ~/LGML
    docker:
      - image: ubuntu
        environment:
          CROSS_ARCH: armhf
          ARCH_FLAGS_PI3: -mcpu=cortex-a53 -mfpu=neon-fp-armv8 -mfloat-abi=hard # -ffast-math # arch flags for JUCEMakefile -> RPI3
          ARCH_FLAGS_PI4:  -mcpu=cortex-a72 -mtune=cortex-a72 -mfpu=neon-fp-armv8 -mfloat-abi=hard
          DST_LGML_PATH: /tmp/buildRasp
          PKG_CONFIG_PATH: /usr/lib/arm-linux-gnueabihf/pkgconfig
          BUILDLGML_CMD_BASE: python3 Scripts/buildScript.py --configure --exportpath=/tmp/buildRasp/ --os=linux --build --package --export
          DEBIAN_FRONTEND: noninteractive
    steps:
      - run:
          name: install git
          command: |
            apt-get -qq update
            apt-get install -y git
      - checkout
      - run:
          name: install LGMLRasp dependencies
          command: |
            set -x
            apt-get install -y g++-10-arm-linux-gnueabihf pkg-config
            . /etc/lsb-release
            echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports $DISTRIB_CODENAME main universe" >> /etc/apt/sources.list
            echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports $DISTRIB_CODENAME-updates main universe" >> /etc/apt/sources.list
            apt-get install -y git
            git submodule update --init --recursive
            export CXX=arm-linux-gnueabihf-g++-10
            export CC=arm-linux-gnueabihf-gcc-10
            sh Scripts/linux/installDevDeps.sh
            

      - run:
          name: build and package LGMLRasp
          command: |
            pip3 install -U pip
            set -x
            export CXX=arm-linux-gnueabihf-g++-10
            sh Scripts/linux/installExportDeps.sh
            export ARCH_FLAGS=$ARCH_FLAGS_PI4
            $BUILDLGML_CMD_BASE --configuration=Release --packagesuffix=Rpi4
            arm-linux-gnueabihf-objdump -x ~/LGML/Builds/LinuxMakefile/build/LGML | grep NEEDED > "$DST_LGML_PATH/dependenciesRpi4.txt"
            python3 Scripts/buildScript.py --clean
            export ARCH_FLAGS=$ARCH_FLAGS_PI3
            $BUILDLGML_CMD_BASE --configuration=Release --packagesuffix=Rpi3
            arm-linux-gnueabihf-objdump -x ~/LGML/Builds/LinuxMakefile/build/LGML | grep NEEDED > "$DST_LGML_PATH/dependenciesRpi3.txt"
            python3 Scripts/buildScript.py --clean

      - store_artifacts:
          path: /tmp/buildRasp/




  buildOSX:
    working_directory: ~/LGML
    macos:
      xcode: "11.0.0"
    steps:
      - checkout
      - run:
          name: install LGML OSX dependencies
          command: |
            git submodule update --init --recursive
            sh Scripts/osx/installDevDeps.sh 
            sh Scripts/osx/installExportDeps.sh
            
      - run:
          name: build and package LGML OSX
          command: |
            python3 Scripts/buildScript.py --configure --exportpath=/tmp/buildOSX/64Beta/ --os=osx --configuration=Beta --arch=x86_64
            python3 Scripts/buildScript.py --build --package --export
            python3 Scripts/buildScript.py --configure --exportpath=/tmp/buildOSX/64/ --os=osx --configuration=Release --arch=x86_64
            python3 Scripts/buildScript.py --build --package --export
            
            
      - store_artifacts:
          path: /tmp/buildOSX #$DST_LGML_PATH


workflows:
  version: 2
  build_all_platforms:
    jobs:
      - buildOSX
      - build_rasp
      - buildu18
      - build32



general:
  branches:
    only:
      - master
      - ci/all
      - ci/circleci
